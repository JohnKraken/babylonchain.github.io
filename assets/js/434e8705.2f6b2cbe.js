"use strict";(self.webpackChunkdocument_sample=self.webpackChunkdocument_sample||[]).push([[6365],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>b});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),d=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=d(e.components);return o.createElement(l.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=d(t),m=r,b=c["".concat(l,".").concat(m)]||c[m]||u[m]||a;return t?o.createElement(b,i(i({ref:n},p),{},{components:t})):o.createElement(b,i({ref:n},p))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var d=2;d<a;d++)i[d]=t[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8738:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var o=t(7462),r=(t(7294),t(3905));const a={id:"setup-node",sidebar_label:"Setting Up a Full Node",hide_table_of_contents:!0},i="Setting Up a Full Node",s={unversionedId:"node-operators/setup-node",id:"node-operators/setup-node",title:"Setting Up a Full Node",description:"This is a guide for setting up a full node for the Babylon system.",source:"@site/docs/node-operators/setup-node.md",sourceDirName:"node-operators",slug:"/node-operators/setup-node",permalink:"/docs/node-operators/setup-node",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/node-operators/setup-node.md",tags:[],version:"current",frontMatter:{id:"setup-node",sidebar_label:"Setting Up a Full Node",hide_table_of_contents:!0},sidebar:"docs",previous:{title:"Node Configuration",permalink:"/docs/node-operators/node-config"},next:{title:"Becoming a Validator",permalink:"/docs/node-operators/become-validator"}},l={},d=[{value:"1. Initialize the node directory",id:"1-initialize-the-node-directory",level:2},{value:"2. Add seed nodes and persistent peers",id:"2-add-seed-nodes-and-persistent-peers",level:2},{value:"3. Setup cosmovisor",id:"3-setup-cosmovisor",level:2},{value:"4. Start the node",id:"4-start-the-node",level:2}],p={toc:d};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"setting-up-a-full-node"},"Setting Up a Full Node"),(0,r.kt)("p",null,"This is a guide for setting up a full node for the Babylon system."),(0,r.kt)("admonition",{title:"Note",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"This guide requires Having Babylon installed on a Linux System."),(0,r.kt)("p",{parentName:"admonition"},"Babylon requires golang version 1.18 for Babylon to be installed on your system.")),(0,r.kt)("p",null,"Prerequisites: Having Babylon installed on a Linux system.\nNote: You should have the Babylon version specified at the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/babylonchain/networks/tree/main/bbn-test-1"},"bbn-test-1 network info page"),"\ninstalled."),(0,r.kt)("h2",{id:"1-initialize-the-node-directory"},"1. Initialize the node directory"),(0,r.kt)("p",null,"First, initialize a node configuration directory under ",(0,r.kt)("inlineCode",{parentName:"p"},"~/.babylond"),".\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"$NODENAME")," variable specifies the name you aim to give your node."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"babylond init $NODENAME --chain-id bbn-test-1\n")),(0,r.kt)("p",null,"Then, retrieve the genesis file and place it in the node directory:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"wget https://github.com/babylonchain/networks/raw/main/bbn-test-1/genesis.tar.bz2\ntar -xjf genesis.tar.bz2 && rm genesis.tar.bz2\nmv genesis.json ~/.babylond/config/genesis.json\n")),(0,r.kt)("h2",{id:"2-add-seed-nodes-and-persistent-peers"},"2. Add seed nodes and persistent peers"),(0,r.kt)("p",null,"Edit the configuration file at ",(0,r.kt)("inlineCode",{parentName:"p"},"~/.babylond/config/config.toml")," and modify\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"seeds")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"persistent_peers")," attributes to contain appropriate seeds and peers\nof your choice. The full list of Babylon approved seeds and peers can be found under\nthe ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/babylonchain/networks/tree/main/bbn-test-1"},"bbn-test-1 network info page"),"."),(0,r.kt)("p",null,"Edit the configuration file at ",(0,r.kt)("inlineCode",{parentName:"p"},"~/.babylond/config/app.toml")," and modify the\n",(0,r.kt)("inlineCode",{parentName:"p"},"btc-network")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"btc-tag")," attributes to contain the BTC network parameters specified\nin the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/babylonchain/networks/tree/main/bbn-test-1"},"bbn-test-1 network info page"),"."),(0,r.kt)("h2",{id:"3-setup-cosmovisor"},"3. Setup cosmovisor"),(0,r.kt)("p",null,"To install the latest version of Cosmovisor"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"go install cosmossdk.io/tools/cosmovisor/cmd/cosmovisor@latest\n")),(0,r.kt)("p",null,"Create the necessary directories"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"mkdir -p ~/.babylond\nmkdir -p ~/.babylond/cosmovisor\nmkdir -p ~/.babylond/cosmovisor/genesis\nmkdir -p ~/.babylond/cosmovisor/genesis/bin\nmkdir -p ~/.babylond/cosmovisor/upgrades\n")),(0,r.kt)("p",null,"Copy the ",(0,r.kt)("inlineCode",{parentName:"p"},"babylond")," binary into the ",(0,r.kt)("inlineCode",{parentName:"p"},"cosmovisor/genesis")," folder"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"cp $GOPATH/bin/babylond ~/.babylond/cosmovisor/genesis/bin/babylond\n")),(0,r.kt)("p",null,"Setup a cosmovisor service:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},'sudo tee /etc/systemd/system/babylond.service > /dev/null <<EOF\n[Unit]\nDescription=Babylon daemon\nAfter=network-online.target\n\n[Service]\nUser=$USER\nExecStart=$(which cosmovisor) run start --x-crisis-skip-assert-invariants\nRestart=always\nRestartSec=3\nLimitNOFILE=infinity\n\nEnvironment="DAEMON_NAME=babylond"\nEnvironment="DAEMON_HOME=${HOME}/.babylond"\nEnvironment="DAEMON_RESTART_AFTER_UPGRADE=true"\nEnvironment="DAEMON_ALLOW_DOWNLOAD_BINARIES=false"\n\n[Install]\nWantedBy=multi-user.target\nEOF\n')),(0,r.kt)("h2",{id:"4-start-the-node"},"4. Start the node"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"sudo -S systemctl daemon-reload\nsudo -S systemctl enable babylond\nsudo -S systemctl start babylond\n")),(0,r.kt)("p",null,"You can check the status of the node by running"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"systemctl status babylond\n")))}c.isMDXComponent=!0}}]);